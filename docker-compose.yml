version: '3.8'

services:
  traefik:
    image: traefik:v2.10.7
    container_name: traefik
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"  # allow without providing ssl certificate
      - "--providers.docker=true" # enable docker as provider
      - "--api.dashboard=true"  # enable dashboard
      - "--providers.docker.exposedbydefault=false"  # do not expose every container, only those with labels
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/dynamic/traefik.yaml:ro  # mount dynamic configuration file
      - ~/.certs:/etc/certs/:ro
    restart: always
    networks:
      - traefik_net
    labels: # labels for traefik itself, for dashboard
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"

      - "traefik.http.routers.traefik_https.rule=Host(`traefik.jondef.me`)"
      - "traefik.http.routers.traefik_https.entrypoints=websecure"
      - "traefik.http.routers.traefik_https.tls=true"

      - "traefik.http.routers.traefik_https.service=api@internal"
      - "traefik.http.routers.traefik_https.middlewares=traefik-auth"

      # generate with htpasswd -nb admin password (dollar signs need to be doubled)
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$1XqOGJR7$$uzAsayMj.Nk0.DHP5UYe51"

  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.jondef.me`)"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"  # specify port of whoami service
    networks:
      - traefik_net

  hugo-server:
    container_name: hugo-server
    image: nginx:alpine
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.hugo-server.entrypoints=websecure"
      - "traefik.http.routers.hugo-server.tls=true"
      - "traefik.http.routers.hugo-server.rule=Host(`jondef.me`)"
      - "traefik.http.services.hugo-server.loadbalancer.server.port=80"
    volumes:
      - hugo_public:/usr/share/nginx/html:ro
    restart: unless-stopped
    depends_on:
      - hugo-compile
    networks:
      - traefik_net

  hugo-compile:
    container_name: hugo-compile
    build:
      context: ./hugo
    command: hugo
    volumes:
      - hugo_public:/src/public:wr
    restart: "no"

  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.jondef.me`)"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
    volumes:
      - ~/vaultwarden-data/:/data/
    restart: unless-stopped
    networks:
      - traefik_net

  stirling:
    container_name: stirling
    image: frooodle/s-pdf:latest
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.stirling.entrypoints=websecure"
      - "traefik.http.routers.stirling.tls=true"
      - "traefik.http.routers.stirling.rule=Host(`stirling.jondef.me`)"
      - "traefik.http.services.stirling.loadbalancer.server.port=8080"
    volumes:
      - ~/stirling-data/trainingData:/usr/share/tesseract-ocr/5/tessdata #Required for extra OCR languages
      - ~/stirling-data/extraConfigs:/configs
      - ~/stirling-data/customFiles:/customFiles/
      - ~/stirling-data/logs:/logs/
    restart: unless-stopped
    networks:
      - traefik_net

  nextcloud:
    image: nextcloud
    container_name: nextcloud
    restart: unless-stopped
    networks:
      - traefik_net
    depends_on:
      - nextclouddb
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.jondef.me`)"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
    volumes:
      - ~/nextcloud-data/html:/var/www/html # Map the /var/www/html directory in the container to the html folder in the same folder as the docker-compose.yml
      - ~/nextcloud-data/custom_apps:/var/www/html/custom_apps # These volumes allow us to easily interact with the files in the container
      - ~/nextcloud-data/config:/var/www/html/config
      - ~/nextcloud-data/data:/var/www/html/data
    environment:
      - PUID=1000 # The user ids. Most likely both should be 1000. Incorrectly setting these will led to file permission issues
      - PGID=1000 # Set these to whatever your user is.
      - TZ=America/Los_Angeles # Set this to your timezone
      - MYSQL_DATABASE=nextcloud # This is the database information we will set up in the next section
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=dbpassword
      - MYSQL_HOST=nextclouddb
      - REDIS_HOST=redis # The redis container to use

  nextclouddb:
    image: mariadb
    container_name: nextcloud-db
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW # I honestly cant remember. If you know why let me know.
    networks:
      - traefik_net
    volumes:
      - ~/nextclouddb-data:/var/lib/mysql
    environment:
      - PUID=1000 # Should be the same as the other containers
      - PGID=1000
      - TZ=America/Los_Angeles
      - MYSQL_RANDOM_ROOT_PASSWORD=true
      - MYSQL_PASSWORD=dbpassword # Same information that was entered in the nextcloud portion
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  collabora:
    image: collabora/code:latest
    container_name: collabora
    restart: unless-stopped
    networks:
      - traefik_net
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Los_Angeles # Should be the same as the others
      - password=password
      - username=nextcloud
      - domain=example.com # domain your nextcloud is on
      - extra_params=--o:ssl.enable=true # Use if have ssl. You should.
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_net"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls=true"
      - "traefik.http.routers.nextcloud.rule=Host(`collab.jondef.me`)"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=9980"

  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - ~/redis-data:/data
    networks:
      - traefik_net

  #minecraft:
  #  container_name: minecraft
  #  image: itzg/minecraft-server
  #  labels:
  #    - "traefik.enable=true"
  #    - "traefik.docker.network=traefik_net"
  #
  #    - "traefik.udp.routers.minecraft.entrypoints=minecraft"
  #    - "traefik.udp.routers.minecraft.service=minecraft"
  #    - "traefik.udp.services.minecraft.loadbalancer.server.port=25565"
  #  tty: true
  #  stdin_open: true
  #  environment:
  #    EULA: "TRUE"
  #    MEMORY: "2G"
  #    JVM_OPTS: "-Xmx2000M -Xms2000M"
  #    STOP_SERVER_ANNOUNCE_DELAY: "5"
  #    MOTD: "A §l§cMinecraft§r §nserver"
  #    DIFFICULTY: "hard"
  #    MAX_PLAYERS: "5"
  #    OPS: |
  #      16b17019-454d-4332-8c52-dfd3440874b7
  #    WHITELIST_ENABLED: "true"
  #    WHITE_LIST: |
  #      33d70dfd-cf46-42df-ba02-cf747c40a5fa, GeorgeSwiss
  #      16b17019-454d-4332-8c52-dfd3440874b7, BoLo_
  #  volumes:
  #    - ~/minecraft_data/:/data
  #  restart: unless-stopped
  #  networks:
  #    - traefik_net

volumes:
  hugo_public: { }

networks:
  traefik_net: { }
