x-db-env: &db-env
  PGHOST: ${PGHOST:-plane-db}
  PGDATABASE: ${PGDATABASE:-plane}
  POSTGRES_USER: ${POSTGRES_USER:-plane}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-plane}
  POSTGRES_DB: ${POSTGRES_DB:-plane}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  PGDATA: ${PGDATA:-/var/lib/postgresql/data}

x-redis-env: &redis-env
  REDIS_HOST: ${REDIS_HOST:-plane-redis}
  REDIS_PORT: ${REDIS_PORT:-6379}
  REDIS_URL: ${REDIS_URL:-redis://plane-redis:6379/}

x-minio-env: &minio-env
  MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}

x-aws-s3-env: &aws-s3-env
  AWS_REGION: ${AWS_REGION:-}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-access-key}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-secret-key}
  AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL:-https://plane-minio:9000}
  AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}

x-proxy-env: &proxy-env
  NGINX_PORT: ${NGINX_PORT:-80}
  BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}
  FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-5242880}

x-mq-env: &mq-env # RabbitMQ Settings
  RABBITMQ_HOST: ${RABBITMQ_HOST:-plane-mq}
  RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
  RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-plane}
  RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-plane}
  RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-plane}
  RABBITMQ_VHOST: ${RABBITMQ_VHOST:-plane}

x-live-env: &live-env
  API_BASE_URL: ${API_BASE_URL:-http://api:8000}

x-app-env: &app-env
  WEB_URL: https://collab.${HOST_DOMAIN}
  DEBUG: ${DEBUG:-0}
  CORS_ALLOWED_ORIGINS: https://collab.${HOST_DOMAIN}
  GUNICORN_WORKERS: 1
  USE_MINIO: ${USE_MINIO:-1}
  DATABASE_URL: ${DATABASE_URL:-postgresql://plane:plane@plane-db/plane}
  SECRET_KEY: ${SECRET_KEY}
  AMQP_URL: ${AMQP_URL:-amqp://plane:plane@plane-mq:5672/plane}
  API_KEY_RATE_LIMIT: ${API_KEY_RATE_LIMIT:-60/minute}
  MINIO_ENDPOINT_SSL: ${MINIO_ENDPOINT_SSL:-0}

services:
  web:
    image: artifacts.plane.so/makeplane/plane-frontend:${APP_RELEASE:-stable}
    command: node web/server.js web
    restart: always
    depends_on:
      - api
      - worker
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.plane-frontend.entrypoints=websecure
      - traefik.http.routers.plane-frontend.tls.certresolver=cloudflare
      - traefik.http.routers.plane-frontend.rule=Host(`collab.${HOST_DOMAIN}`)
      - traefik.http.services.plane-frontend.loadbalancer.server.scheme=http
      - traefik.http.services.plane-frontend.loadbalancer.server.port=3000
    networks:
      - traefik-public

  space:
    image: artifacts.plane.so/makeplane/plane-space:${APP_RELEASE:-stable}
    command: node space/server.js space
    restart: always
    depends_on:
      - api
      - worker
      - web
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.plane-space.entrypoints=websecure
      - traefik.http.routers.plane-space.tls.certresolver=cloudflare
      - traefik.http.routers.plane-space.rule=Host(`collab.${HOST_DOMAIN}`) && PathPrefix (`/spaces/`)
      - traefik.http.services.plane-space.loadbalancer.server.scheme=http
      - traefik.http.services.plane-space.loadbalancer.server.port=3000
    networks:
      #- plane_net
      - traefik-public

  admin:
    image: artifacts.plane.so/makeplane/plane-admin:${APP_RELEASE:-stable}
    command: node admin/server.js admin
    restart: always
    depends_on:
      - api
      - web
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.plane-admin.entrypoints=websecure
      - traefik.http.routers.plane-admin.tls.certresolver=cloudflare
      - traefik.http.routers.plane-admin.rule=Host(`collab.${HOST_DOMAIN}`) && PathPrefix (`/god-mode/`)
      - traefik.http.services.plane-admin.loadbalancer.server.scheme=http
      - traefik.http.services.plane-admin.loadbalancer.server.port=3000
    networks:
      #- plane_net
      - traefik-public

  live:
    image: artifacts.plane.so/makeplane/plane-live:${APP_RELEASE:-stable}
    command: node live/dist/server.js live
    environment:
      <<: [*live-env, *redis-env]
    restart: always
    depends_on:
      - api
      - web
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.plane-live.entrypoints=websecure
      - traefik.http.routers.plane-live.tls.certresolver=cloudflare
      - traefik.http.routers.plane-live.rule=Host(`collab.${HOST_DOMAIN}`) && PathPrefix (`/live/`)
      - traefik.http.services.plane-live.loadbalancer.server.scheme=http
      - traefik.http.services.plane-live.loadbalancer.server.port=3000
    networks:
      - plane_net  # needs redis
      - traefik-public

  api:
    image: artifacts.plane.so/makeplane/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-api.sh
    restart: always
    volumes:
      - ${DOCKERDIR}/plane/logs_api:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - plane-db
      - plane-redis
      - plane-mq
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.plane-api.entrypoints=websecure
      - traefik.http.routers.plane-api.tls.certresolver=cloudflare
      - traefik.http.routers.plane-api.rule=Host(`collab.${HOST_DOMAIN}`) && (PathPrefix(`/api/`) || PathPrefix(`/auth/`))
      - traefik.http.services.plane-api.loadbalancer.server.scheme=http
      - traefik.http.services.plane-api.loadbalancer.server.port=8000
    networks:
      - plane_net
      - traefik-public

  worker:
    image: artifacts.plane.so/makeplane/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-worker.sh
    restart: always
    volumes:
      - ${DOCKERDIR}/plane/logs_worker:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - api
      - plane-db
      - plane-redis
      - plane-mq
    networks:
      - plane_net

  beat-worker:
    image: artifacts.plane.so/makeplane/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-beat.sh
    restart: always
    volumes:
      - ${DOCKERDIR}/plane/logs_beat-worker:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - api
      - plane-db
      - plane-redis
      - plane-mq
    networks:
      - plane_net

  migrator:
    image: artifacts.plane.so/makeplane/plane-backend:${APP_RELEASE:-stable}
    command: ./bin/docker-entrypoint-migrator.sh
    restart: on-failure
    volumes:
      - ${DOCKERDIR}/plane/logs_migrator:/code/plane/logs
    environment:
      <<: [*app-env, *db-env, *redis-env, *minio-env, *aws-s3-env, *proxy-env]
    depends_on:
      - plane-db
      - plane-redis
    networks:
      - plane_net

  # Comment this if you already have a database running
  plane-db:
    image: postgres:15.7-alpine
    command: postgres -c 'max_connections=1000'
    restart: always
    environment:
      <<: *db-env
    volumes:
      - ${DOCKERDIR}/plane/pgdata:/var/lib/postgresql/data
    networks:
      - plane_net

  plane-redis:
    image: valkey/valkey:7.2.5-alpine
    restart: always
    volumes:
      - ${DOCKERDIR}/plane/redisdata:/data
    networks:
      - plane_net

  plane-mq:
    image: rabbitmq:3.13.6-management-alpine
    restart: always
    environment:
      <<: *mq-env
    volumes:
      - ${DOCKERDIR}/plane/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - plane_net

networks:
  traefik-public:
    external: true
  plane_net: {}